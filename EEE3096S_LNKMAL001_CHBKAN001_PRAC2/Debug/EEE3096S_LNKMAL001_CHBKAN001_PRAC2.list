
EEE3096S_LNKMAL001_CHBKAN001_PRAC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000eb0  08000eb0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000eb0  08000eb0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb0  08000eb0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb0  08000eb0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb0  08000eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000ec0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000ec0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000165b  00000000  00000000  00020073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000061a  00000000  00000000  000216ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00021ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f5  00000000  00000000  00021e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002696  00000000  00000000  00021f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000223f  00000000  00000000  000245d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000089a3  00000000  00000000  00026812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000390  00000000  00000000  0002f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0002f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e98 	.word	0x08000e98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08000e98 	.word	0x08000e98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_ClockConfig>:
 *@param:  GPIOx, pointer to GPIO registers definition structure
 *         see @GPIOx Macros in mcu header file
 *@retval: None
 *@Note: None
 */
void GPIO_ClockConfig(uint8_t EnOrDi,GPIO_RegDef_t *GPIOx){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
	if (EnOrDi==ENABLE){
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d148      	bne.n	80002c8 <GPIO_ClockConfig+0xa8>
		/*
		 * See GPIOCK Clock Enable Macros @GPIOx clock Enable Macros
		 */
		if (GPIOx==GPIOA){
 8000236:	683a      	ldr	r2, [r7, #0]
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	429a      	cmp	r2, r3
 800023e:	d107      	bne.n	8000250 <GPIO_ClockConfig+0x30>
			GPIOA_PCLKEN();
 8000240:	4b44      	ldr	r3, [pc, #272]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	4b43      	ldr	r3, [pc, #268]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0289      	lsls	r1, r1, #10
 800024a:	430a      	orrs	r2, r1
 800024c:	615a      	str	r2, [r3, #20]
		else if (GPIOx==GPIOF){
			GPIOF_PCLKDIS();
		}
	}

}
 800024e:	e07d      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOB){
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	4a41      	ldr	r2, [pc, #260]	; (8000358 <GPIO_ClockConfig+0x138>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d107      	bne.n	8000268 <GPIO_ClockConfig+0x48>
			GPIOB_PCLKEN();
 8000258:	4b3e      	ldr	r3, [pc, #248]	; (8000354 <GPIO_ClockConfig+0x134>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	4b3d      	ldr	r3, [pc, #244]	; (8000354 <GPIO_ClockConfig+0x134>)
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	02c9      	lsls	r1, r1, #11
 8000262:	430a      	orrs	r2, r1
 8000264:	615a      	str	r2, [r3, #20]
}
 8000266:	e071      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOC){
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	4a3c      	ldr	r2, [pc, #240]	; (800035c <GPIO_ClockConfig+0x13c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d107      	bne.n	8000280 <GPIO_ClockConfig+0x60>
			GPIOC_PCLKEN();
 8000270:	4b38      	ldr	r3, [pc, #224]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4b37      	ldr	r3, [pc, #220]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	0309      	lsls	r1, r1, #12
 800027a:	430a      	orrs	r2, r1
 800027c:	615a      	str	r2, [r3, #20]
}
 800027e:	e065      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOD){
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	4a37      	ldr	r2, [pc, #220]	; (8000360 <GPIO_ClockConfig+0x140>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d107      	bne.n	8000298 <GPIO_ClockConfig+0x78>
			GPIOD_PCLKEN();
 8000288:	4b32      	ldr	r3, [pc, #200]	; (8000354 <GPIO_ClockConfig+0x134>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b31      	ldr	r3, [pc, #196]	; (8000354 <GPIO_ClockConfig+0x134>)
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	0349      	lsls	r1, r1, #13
 8000292:	430a      	orrs	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
}
 8000296:	e059      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOE){
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	4a32      	ldr	r2, [pc, #200]	; (8000364 <GPIO_ClockConfig+0x144>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d107      	bne.n	80002b0 <GPIO_ClockConfig+0x90>
			GPIOE_PCLKEN();
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	0389      	lsls	r1, r1, #14
 80002aa:	430a      	orrs	r2, r1
 80002ac:	615a      	str	r2, [r3, #20]
}
 80002ae:	e04d      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOF){
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4a2d      	ldr	r2, [pc, #180]	; (8000368 <GPIO_ClockConfig+0x148>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d149      	bne.n	800034c <GPIO_ClockConfig+0x12c>
			GPIOF_PCLKEN();
 80002b8:	4b26      	ldr	r3, [pc, #152]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	4b25      	ldr	r3, [pc, #148]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	03c9      	lsls	r1, r1, #15
 80002c2:	430a      	orrs	r2, r1
 80002c4:	615a      	str	r2, [r3, #20]
}
 80002c6:	e041      	b.n	800034c <GPIO_ClockConfig+0x12c>
		if (GPIOx==GPIOA){
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d106      	bne.n	80002e0 <GPIO_ClockConfig+0xc0>
			GPIOA_PCLKDIS();
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002d4:	695a      	ldr	r2, [r3, #20]
 80002d6:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002d8:	4924      	ldr	r1, [pc, #144]	; (800036c <GPIO_ClockConfig+0x14c>)
 80002da:	400a      	ands	r2, r1
 80002dc:	615a      	str	r2, [r3, #20]
}
 80002de:	e035      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOB){
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <GPIO_ClockConfig+0x138>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_ClockConfig+0xd6>
			GPIOB_PCLKDIS();
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002ea:	695a      	ldr	r2, [r3, #20]
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <GPIO_ClockConfig+0x134>)
 80002ee:	4920      	ldr	r1, [pc, #128]	; (8000370 <GPIO_ClockConfig+0x150>)
 80002f0:	400a      	ands	r2, r1
 80002f2:	615a      	str	r2, [r3, #20]
}
 80002f4:	e02a      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOC){
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	4a18      	ldr	r2, [pc, #96]	; (800035c <GPIO_ClockConfig+0x13c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_ClockConfig+0xec>
			GPIOC_PCLKDIS();
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000300:	695a      	ldr	r2, [r3, #20]
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000304:	491b      	ldr	r1, [pc, #108]	; (8000374 <GPIO_ClockConfig+0x154>)
 8000306:	400a      	ands	r2, r1
 8000308:	615a      	str	r2, [r3, #20]
}
 800030a:	e01f      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOD){
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <GPIO_ClockConfig+0x140>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_ClockConfig+0x102>
			GPIOD_PCLKDIS();
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <GPIO_ClockConfig+0x134>)
 800031a:	4917      	ldr	r1, [pc, #92]	; (8000378 <GPIO_ClockConfig+0x158>)
 800031c:	400a      	ands	r2, r1
 800031e:	615a      	str	r2, [r3, #20]
}
 8000320:	e014      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOE){
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <GPIO_ClockConfig+0x144>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_ClockConfig+0x118>
			GPIOE_PCLKDIS();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <GPIO_ClockConfig+0x134>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000330:	4912      	ldr	r1, [pc, #72]	; (800037c <GPIO_ClockConfig+0x15c>)
 8000332:	400a      	ands	r2, r1
 8000334:	615a      	str	r2, [r3, #20]
}
 8000336:	e009      	b.n	800034c <GPIO_ClockConfig+0x12c>
		else if (GPIOx==GPIOF){
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <GPIO_ClockConfig+0x148>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_ClockConfig+0x12c>
			GPIOF_PCLKDIS();
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <GPIO_ClockConfig+0x134>)
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <GPIO_ClockConfig+0x160>)
 8000348:	400a      	ands	r2, r1
 800034a:	615a      	str	r2, [r3, #20]
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b002      	add	sp, #8
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000400 	.word	0x48000400
 800035c:	48000800 	.word	0x48000800
 8000360:	48000c00 	.word	0x48000c00
 8000364:	48001000 	.word	0x48001000
 8000368:	48001400 	.word	0x48001400
 800036c:	fffdffff 	.word	0xfffdffff
 8000370:	fffbffff 	.word	0xfffbffff
 8000374:	fff7ffff 	.word	0xfff7ffff
 8000378:	ffefffff 	.word	0xffefffff
 800037c:	ffdfffff 	.word	0xffdfffff
 8000380:	ffbfffff 	.word	0xffbfffff

08000384 <GPIO_Init>:
 * @retval: None
 * @Note: User GPIOx_Handle structure must initialize the all
 *        configuration settings not used in use app to default
 *        See MCU GPIO Registers
 */
void GPIO_Init(GPIO_Handle_t* GPIOx_Handle){
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	//Reset the GPIOx Registers first
	//GPIO_DeInit(GPIOx_Handle->GPIOx);
	//GetPinNumber
	uint8_t PinNumber = GPIOx_Handle->GPIOx_Config.PinNumber;
 800038c:	200f      	movs	r0, #15
 800038e:	183b      	adds	r3, r7, r0
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7912      	ldrb	r2, [r2, #4]
 8000394:	701a      	strb	r2, [r3, #0]

	/*
	 * Configure GPIOx Registers
	 */
	//1. GPIO Mode
	GPIOx_Handle->GPIOx->MODER |= (GPIOx_Handle->GPIOx_Config.PinMode<<2*PinNumber);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	0019      	movs	r1, r3
 80003a2:	183b      	adds	r3, r7, r0
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4099      	lsls	r1, r3
 80003aa:	000b      	movs	r3, r1
 80003ac:	0019      	movs	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]


	if (GPIOx_Handle->GPIOx_Config.PinMode==AltFucntionMode){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d124      	bne.n	8000408 <GPIO_Init+0x84>
		uint8_t AFRx= PinNumber/8;
 80003be:	240e      	movs	r4, #14
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	183a      	adds	r2, r7, r0
 80003c4:	7812      	ldrb	r2, [r2, #0]
 80003c6:	08d2      	lsrs	r2, r2, #3
 80003c8:	701a      	strb	r2, [r3, #0]
		uint8_t AFSELy=PinNumber%8;
 80003ca:	250d      	movs	r5, #13
 80003cc:	197b      	adds	r3, r7, r5
 80003ce:	183a      	adds	r2, r7, r0
 80003d0:	7812      	ldrb	r2, [r2, #0]
 80003d2:	2107      	movs	r1, #7
 80003d4:	400a      	ands	r2, r1
 80003d6:	701a      	strb	r2, [r3, #0]
		GPIOx_Handle->GPIOx->AFR[AFRx] |= (GPIOx_Handle->GPIOx_Config.AFSEL<<4*AFSELy);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	193a      	adds	r2, r7, r4
 80003de:	7812      	ldrb	r2, [r2, #0]
 80003e0:	3208      	adds	r2, #8
 80003e2:	0092      	lsls	r2, r2, #2
 80003e4:	58d1      	ldr	r1, [r2, r3]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a5b      	ldrb	r3, [r3, #9]
 80003ea:	001a      	movs	r2, r3
 80003ec:	197b      	adds	r3, r7, r5
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	409a      	lsls	r2, r3
 80003f4:	0013      	movs	r3, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	193a      	adds	r2, r7, r4
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	4301      	orrs	r1, r0
 8000402:	3208      	adds	r2, #8
 8000404:	0092      	lsls	r2, r2, #2
 8000406:	50d1      	str	r1, [r2, r3]

	}
	//3. PullUp and PullDown
	GPIOx_Handle->GPIOx->PUPDR |= (GPIOx_Handle->GPIOx_Config.PullUpPullDown<<2*PinNumber);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68da      	ldr	r2, [r3, #12]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	7a1b      	ldrb	r3, [r3, #8]
 8000412:	0019      	movs	r1, r3
 8000414:	200f      	movs	r0, #15
 8000416:	183b      	adds	r3, r7, r0
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4099      	lsls	r1, r3
 800041e:	000b      	movs	r3, r1
 8000420:	0019      	movs	r1, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	430a      	orrs	r2, r1
 8000428:	60da      	str	r2, [r3, #12]
	//3.OutPutType
	GPIOx_Handle->GPIOx->OTYPER |= (GPIOx_Handle->GPIOx_Config.OutPutType<<PinNumber);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	799b      	ldrb	r3, [r3, #6]
 8000434:	0019      	movs	r1, r3
 8000436:	183b      	adds	r3, r7, r0
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4099      	lsls	r1, r3
 800043c:	000b      	movs	r3, r1
 800043e:	0019      	movs	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	430a      	orrs	r2, r1
 8000446:	605a      	str	r2, [r3, #4]

	//3. OutPut Speed
	GPIOx_Handle->GPIOx->OSPEEDR |= (GPIOx_Handle->GPIOx_Config.PinSpeed<<2*PinNumber);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	79db      	ldrb	r3, [r3, #7]
 8000452:	0019      	movs	r1, r3
 8000454:	183b      	adds	r3, r7, r0
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4099      	lsls	r1, r3
 800045c:	000b      	movs	r3, r1
 800045e:	0019      	movs	r1, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	430a      	orrs	r2, r1
 8000466:	609a      	str	r2, [r3, #8]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b004      	add	sp, #16
 800046e:	bdb0      	pop	{r4, r5, r7, pc}

08000470 <GPIO_WritePin>:
 * @Brief: Writes one to given GPIO port pin Number
 * @param: GPIOx, pointer to GPIO registers definition structure
 *         see @GPIOx Macros in mcu header file
 * @param: PinNumber: GPIOx pin Number see @GPIOx Pin Numbers
 */
void GPIO_WritePin(GPIO_RegDef_t *GPIOx,uint8_t PinNumber,uint8_t PinState){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	0008      	movs	r0, r1
 800047a:	0011      	movs	r1, r2
 800047c:	1cfb      	adds	r3, r7, #3
 800047e:	1c02      	adds	r2, r0, #0
 8000480:	701a      	strb	r2, [r3, #0]
 8000482:	1cbb      	adds	r3, r7, #2
 8000484:	1c0a      	adds	r2, r1, #0
 8000486:	701a      	strb	r2, [r3, #0]
	if (PinState){
 8000488:	1cbb      	adds	r3, r7, #2
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00b      	beq.n	80004a8 <GPIO_WritePin+0x38>
		GPIOx->ODR |= (PinState<<PinNumber);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	1cba      	adds	r2, r7, #2
 8000496:	7811      	ldrb	r1, [r2, #0]
 8000498:	1cfa      	adds	r2, r7, #3
 800049a:	7812      	ldrb	r2, [r2, #0]
 800049c:	4091      	lsls	r1, r2
 800049e:	000a      	movs	r2, r1
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	615a      	str	r2, [r3, #20]
	else{
		GPIOx->ODR &= ~(PIN_SET<<PinNumber);

	}

}
 80004a6:	e00a      	b.n	80004be <GPIO_WritePin+0x4e>
		GPIOx->ODR &= ~(PIN_SET<<PinNumber);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	1cfa      	adds	r2, r7, #3
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	2101      	movs	r1, #1
 80004b2:	4091      	lsls	r1, r2
 80004b4:	000a      	movs	r2, r1
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	615a      	str	r2, [r3, #20]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <GPIO_IRQEnable>:
 * @param: edge_trigger, Falling/Rising edge trigger selectiom
 * 		   or Both  see @Falling, Rising edge Trigger Macros
 * @retval: None
 * @Note: None
 */
void GPIO_IRQEnable(GPIO_Handle_t* GPIOx_Handle,IRQn_t IRQn,uint8_t edge_trigger){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	0008      	movs	r0, r1
 80004d2:	0011      	movs	r1, r2
 80004d4:	1cfb      	adds	r3, r7, #3
 80004d6:	1c02      	adds	r2, r0, #0
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	1cbb      	adds	r3, r7, #2
 80004dc:	1c0a      	adds	r2, r1, #0
 80004de:	701a      	strb	r2, [r3, #0]
	GPIO_Init(GPIOx_Handle);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff4e 	bl	8000384 <GPIO_Init>
	EXTI_IT_Config(GPIOx_Handle->GPIOx, GPIOx_Handle->GPIOx_Config.PinNumber);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 fb52 	bl	8000b9c <EXTI_IT_Config>
	EXTI->IMR  |=  (0x1<<GPIOx_Handle->GPIOx_Config.PinNumber);
 80004f8:	4b24      	ldr	r3, [pc, #144]	; (800058c <GPIO_IRQEnable+0xc4>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	0019      	movs	r1, r3
 8000502:	2301      	movs	r3, #1
 8000504:	408b      	lsls	r3, r1
 8000506:	0019      	movs	r1, r3
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <GPIO_IRQEnable+0xc4>)
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
	if (edge_trigger==FT_INTERRUPT){
 800050e:	1cbb      	adds	r3, r7, #2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10b      	bne.n	800052e <GPIO_IRQEnable+0x66>

		EXTI->FTSR |= (0x1<<GPIOx_Handle->GPIOx_Config.PinNumber);
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000518:	68da      	ldr	r2, [r3, #12]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	0019      	movs	r1, r3
 8000520:	2301      	movs	r3, #1
 8000522:	408b      	lsls	r3, r1
 8000524:	0019      	movs	r1, r3
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000528:	430a      	orrs	r2, r1
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	e025      	b.n	800057a <GPIO_IRQEnable+0xb2>
	}

	else if (edge_trigger==RT_INTERRUPT){
 800052e:	1cbb      	adds	r3, r7, #2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10b      	bne.n	800054e <GPIO_IRQEnable+0x86>
		EXTI->RTSR |= (0x1<<GPIOx_Handle->GPIOx_Config.PinNumber);
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	0019      	movs	r1, r3
 8000540:	2301      	movs	r3, #1
 8000542:	408b      	lsls	r3, r1
 8000544:	0019      	movs	r1, r3
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000548:	430a      	orrs	r2, r1
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	e015      	b.n	800057a <GPIO_IRQEnable+0xb2>

	}
	else {
		EXTI->FTSR |= (0x1<<GPIOx_Handle->GPIOx_Config.PinNumber);
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000550:	68da      	ldr	r2, [r3, #12]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	0019      	movs	r1, r3
 8000558:	2301      	movs	r3, #1
 800055a:	408b      	lsls	r3, r1
 800055c:	0019      	movs	r1, r3
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000560:	430a      	orrs	r2, r1
 8000562:	60da      	str	r2, [r3, #12]
		EXTI->RTSR |= (0x1<<GPIOx_Handle->GPIOx_Config.PinNumber);
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	0019      	movs	r1, r3
 800056e:	2301      	movs	r3, #1
 8000570:	408b      	lsls	r3, r1
 8000572:	0019      	movs	r1, r3
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <GPIO_IRQEnable+0xc4>)
 8000576:	430a      	orrs	r2, r1
 8000578:	609a      	str	r2, [r3, #8]

	}
	NVIC_IRQEnable(IRQn);
 800057a:	1cfb      	adds	r3, r7, #3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	f000 faf4 	bl	8000b6c <NVIC_IRQEnable>
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b002      	add	sp, #8
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010400 	.word	0x40010400

08000590 <main>:

static uint16_t address = 0x0000;
uint16_t arr_value = 999;

int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	RCCConfig();
 8000596:	f000 f827 	bl	80005e8 <RCCConfig>
	GPIO_Config();
 800059a:	f000 f847 	bl	800062c <GPIO_Config>
	init_spi();
 800059e:	f000 f8cf 	bl	8000740 <init_spi>



	for (int i=0; i<6; ++i){
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e011      	b.n	80005cc <main+0x3c>
		write_to_address(address, patterns[i]);
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x50>)
 80005aa:	8818      	ldrh	r0, [r3, #0]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <main+0x54>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	18d3      	adds	r3, r2, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0019      	movs	r1, r3
 80005b6:	f000 f93d 	bl	8000834 <write_to_address>
		address++;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <main+0x50>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <main+0x50>)
 80005c4:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<6; ++i){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b05      	cmp	r3, #5
 80005d0:	ddea      	ble.n	80005a8 <main+0x18>

	}
	address =0;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <main+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	801a      	strh	r2, [r3, #0]
	TIM16_Enable();
 80005d8:	f000 fa26 	bl	8000a28 <TIM16_Enable>

	while(1){
		__asm volatile("NOP");
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	e7fd      	b.n	80005dc <main+0x4c>
 80005e0:	20000024 	.word	0x20000024
 80005e4:	20000000 	.word	0x20000000

080005e8 <RCCConfig>:
 * @Brief: Enables selects External Crystal Oscillator as a system clock for stable Clock
 * @Param: None
 * @Retval: None
 *
 */
static void RCCConfig(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	RCC->CR |= (1U<<16);   //HSE ON
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <RCCConfig+0x40>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <RCCConfig+0x40>)
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0249      	lsls	r1, r1, #9
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

	while(!(RCC->CR & RCC_CR_HSERDY));   //Wait until HSE is READY
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <RCCConfig+0x40>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	029b      	lsls	r3, r3, #10
 8000604:	4013      	ands	r3, r2
 8000606:	d0f9      	beq.n	80005fc <RCCConfig+0x14>

	RCC->CFGR |= 0x01;      //Switch System Clock to HSE
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <RCCConfig+0x40>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <RCCConfig+0x40>)
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	605a      	str	r2, [r3, #4]

	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));   //Wait
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <RCCConfig+0x40>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	2204      	movs	r2, #4
 800061c:	4013      	ands	r3, r2
 800061e:	d0fa      	beq.n	8000616 <RCCConfig+0x2e>


}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000

0800062c <GPIO_Config>:
/*
 * @Brief: Configures PB0-PB7 as output and PA0 as Falling edge trigger Interrupt
 */
static void GPIO_Config(void){
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b087      	sub	sp, #28
 8000630:	af00      	add	r7, sp, #0
	GPIO_Handle_t ledx;
	GPIO_Handle_t sw0;

	GPIO_ClockConfig(ENABLE, GPIOB);
 8000632:	4b42      	ldr	r3, [pc, #264]	; (800073c <GPIO_Config+0x110>)
 8000634:	0019      	movs	r1, r3
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff fdf2 	bl	8000220 <GPIO_ClockConfig>
	GPIO_ClockConfig(ENABLE, GPIOA);
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0019      	movs	r1, r3
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff fdec 	bl	8000220 <GPIO_ClockConfig>

	sw0.GPIOx = GPIOA;
 8000648:	003b      	movs	r3, r7
 800064a:	2290      	movs	r2, #144	; 0x90
 800064c:	05d2      	lsls	r2, r2, #23
 800064e:	601a      	str	r2, [r3, #0]
	sw0.GPIOx_Config.AFSEL = AF0;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	725a      	strb	r2, [r3, #9]
	sw0.GPIOx_Config.OutPutType = PUSHPULL;   //OutPut Type is by default push pull
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	719a      	strb	r2, [r3, #6]
	sw0.GPIOx_Config.PinMode = InputMode;
 800065c:	003b      	movs	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	715a      	strb	r2, [r3, #5]
	sw0.GPIOx_Config.PinNumber = GPIO_PIN0;
 8000662:	003b      	movs	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
	sw0.GPIOx_Config.PinSpeed = HIGHSPEED;
 8000668:	003b      	movs	r3, r7
 800066a:	2203      	movs	r2, #3
 800066c:	71da      	strb	r2, [r3, #7]
	sw0.GPIOx_Config.PullUpPullDown = PullUp;  //Enables PullUp
 800066e:	003b      	movs	r3, r7
 8000670:	2201      	movs	r2, #1
 8000672:	721a      	strb	r2, [r3, #8]

	GPIO_IRQEnable(&sw0,EXTI0_1_IRQn, FT_INTERRUPT);  //Falling Trigger Interrupt
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff ff24 	bl	80004c8 <GPIO_IRQEnable>


	ledx.GPIOx = GPIOB;
 8000680:	210c      	movs	r1, #12
 8000682:	187b      	adds	r3, r7, r1
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <GPIO_Config+0x110>)
 8000686:	601a      	str	r2, [r3, #0]
	ledx.GPIOx_Config.PinNumber = GPIO_PIN0;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	711a      	strb	r2, [r3, #4]
	ledx.GPIOx_Config.OutPutType = PUSHPULL;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	719a      	strb	r2, [r3, #6]
	ledx.GPIOx_Config.PinSpeed   = MEDIUMSPEED;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	71da      	strb	r2, [r3, #7]
	ledx.GPIOx_Config.PinMode = OutputMode;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	715a      	strb	r2, [r3, #5]
	ledx.GPIOx_Config.PullUpPullDown = NoPullUpOrPullDown;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	721a      	strb	r2, [r3, #8]
	ledx.GPIOx_Config.AFSEL    = AF0;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	725a      	strb	r2, [r3, #9]

	GPIO_Init(&ledx);
 80006ac:	000c      	movs	r4, r1
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fe67 	bl	8000384 <GPIO_Init>

	ledx.GPIOx_Config.PinNumber = GPIO_PIN1;
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2201      	movs	r2, #1
 80006bc:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 80006be:	000c      	movs	r4, r1
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fe5e 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN2;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2202      	movs	r2, #2
 80006ce:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 80006d0:	000c      	movs	r4, r1
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fe55 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN3;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2203      	movs	r2, #3
 80006e0:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 80006e2:	000c      	movs	r4, r1
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff fe4c 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN4;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2204      	movs	r2, #4
 80006f2:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 80006f4:	000c      	movs	r4, r1
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff fe43 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN5;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2205      	movs	r2, #5
 8000704:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 8000706:	000c      	movs	r4, r1
 8000708:	187b      	adds	r3, r7, r1
 800070a:	0018      	movs	r0, r3
 800070c:	f7ff fe3a 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN6;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2206      	movs	r2, #6
 8000716:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 8000718:	000c      	movs	r4, r1
 800071a:	187b      	adds	r3, r7, r1
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fe31 	bl	8000384 <GPIO_Init>


	ledx.GPIOx_Config.PinNumber = GPIO_PIN7;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2207      	movs	r2, #7
 8000728:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&ledx);
 800072a:	187b      	adds	r3, r7, r1
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fe29 	bl	8000384 <GPIO_Init>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b007      	add	sp, #28
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	48000400 	.word	0x48000400

08000740 <init_spi>:
 * @Param: None
 * @Retval: None
 * @Note: See gpio.c for gpio initialisation
 *
 */
static void init_spi(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0


  GPIO_Handle_t spix;
  spix.GPIOx  = GPIOB;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4a37      	ldr	r2, [pc, #220]	; (8000828 <init_spi+0xe8>)
 800074a:	601a      	str	r2, [r3, #0]
  spix.GPIOx_Config.AFSEL = AF0;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	725a      	strb	r2, [r3, #9]
  spix.GPIOx_Config.OutPutType = PUSHPULL;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	719a      	strb	r2, [r3, #6]
  spix.GPIOx_Config.PinNumber = GPIO_PIN13;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	220d      	movs	r2, #13
 800075c:	711a      	strb	r2, [r3, #4]
  spix.GPIOx_Config.PinSpeed = LOWSPEED;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	71da      	strb	r2, [r3, #7]
  spix.GPIOx_Config.PullUpPullDown = NoPullUpOrPullDown;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	721a      	strb	r2, [r3, #8]
  spix.GPIOx_Config.PinMode = AltFucntionMode;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2202      	movs	r2, #2
 800076e:	715a      	strb	r2, [r3, #5]

  GPIO_Init(&spix);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff fe06 	bl	8000384 <GPIO_Init>

  spix.GPIOx_Config.PinNumber = GPIO_PIN14;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	220e      	movs	r2, #14
 800077c:	711a      	strb	r2, [r3, #4]
  GPIO_Init(&spix);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fdff 	bl	8000384 <GPIO_Init>

  spix.GPIOx_Config.PinNumber = GPIO_PIN15;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	220f      	movs	r2, #15
 800078a:	711a      	strb	r2, [r3, #4]
  GPIO_Init(&spix);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff fdf8 	bl	8000384 <GPIO_Init>

  spix.GPIOx_Config.PinNumber = GPIO_PIN12;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	220c      	movs	r2, #12
 8000798:	711a      	strb	r2, [r3, #4]
  spix.GPIOx_Config.PinMode = OutputMode;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2201      	movs	r2, #1
 800079e:	715a      	strb	r2, [r3, #5]
  GPIO_Init(&spix);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fdee 	bl	8000384 <GPIO_Init>
  GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_SET);   //Set CS PIN HIGH
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <init_spi+0xe8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	210c      	movs	r1, #12
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fe5e 	bl	8000470 <GPIO_WritePin>

  // Clock enable to SPI
  RCC->APB1ENR |= RCC_APB1ENR_APB1SPI2EN;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <init_spi+0xec>)
 80007b6:	69da      	ldr	r2, [r3, #28]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <init_spi+0xec>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	01c9      	lsls	r1, r1, #7
 80007be:	430a      	orrs	r2, r1
 80007c0:	61da      	str	r2, [r3, #28]
  SPI2->CR1 |= (0x3U<<3); 					            //Set Baud to fpclk / 16
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <init_spi+0xf0>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <init_spi+0xf0>)
 80007c8:	2118      	movs	r1, #24
 80007ca:	430a      	orrs	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]
  SPI2->CR1 |= SPI_CR1_MSTR; 							// Set to master mode
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <init_spi+0xf0>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <init_spi+0xf0>)
 80007d4:	2104      	movs	r1, #4
 80007d6:	430a      	orrs	r2, r1
 80007d8:	601a      	str	r2, [r3, #0]
  SPI2->CR1 |= SPI_CR1_SSM;                             // Software slave management
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <init_spi+0xf0>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <init_spi+0xf0>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0089      	lsls	r1, r1, #2
 80007e4:	430a      	orrs	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
  SPI2->CR1 |= SPI_CR1_SSI;                             //Slave internal select enable
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <init_spi+0xf0>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <init_spi+0xf0>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	0049      	lsls	r1, r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]
  SPI2->CR2 |= 1<<12; 									// Set RX threshold to be 8 bits
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <init_spi+0xf0>)
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <init_spi+0xf0>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0149      	lsls	r1, r1, #5
 8000800:	430a      	orrs	r2, r1
 8000802:	605a      	str	r2, [r3, #4]
  SPI2->CR2 |= SPI_CR2_FRXTH; 	                        // Set to 8-bit mode
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <init_spi+0xf0>)
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <init_spi+0xf0>)
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0149      	lsls	r1, r1, #5
 800080e:	430a      	orrs	r2, r1
 8000810:	605a      	str	r2, [r3, #4]
  SPI2->CR1 |= SPI_CR1_SPE; 							// Enable the SPI peripheral
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <init_spi+0xf0>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <init_spi+0xf0>)
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	430a      	orrs	r2, r1
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b004      	add	sp, #16
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	48000400 	.word	0x48000400
 800082c:	40021000 	.word	0x40021000
 8000830:	40003800 	.word	0x40003800

08000834 <write_to_address>:

// Write to EEPROM address using SPI
static void write_to_address(uint16_t address, uint8_t data) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	1d7b      	adds	r3, r7, #5
 8000842:	1c0a      	adds	r2, r1, #0
 8000844:	701a      	strb	r2, [r3, #0]

	uint8_t dummy; // Junk from the DR

	// Set the Write Enable latch
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_RESET); //Pull CS Low
 8000846:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <write_to_address+0x110>)
 8000848:	2200      	movs	r2, #0
 800084a:	210c      	movs	r1, #12
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fe0f 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(1, EXC_DISABLE, MICRO_SECOND);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2001      	movs	r0, #1
 8000858:	f000 fa7e 	bl	8000d58 <SysTick_Init>
	*((uint8_t*)(&SPI2->DR)) = WREN;
 800085c:	4b3a      	ldr	r3, [pc, #232]	; (8000948 <write_to_address+0x114>)
 800085e:	2206      	movs	r2, #6
 8000860:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); // Hang while RX is empty
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <write_to_address+0x118>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	2201      	movs	r2, #1
 800086a:	4013      	ands	r3, r2
 800086c:	d0fa      	beq.n	8000864 <write_to_address+0x30>
	dummy = SPI2->DR;
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <write_to_address+0x118>)
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	701a      	strb	r2, [r3, #0]
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_SET);
 8000878:	4b32      	ldr	r3, [pc, #200]	; (8000944 <write_to_address+0x110>)
 800087a:	2201      	movs	r2, #1
 800087c:	210c      	movs	r1, #12
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fdf6 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(5000, EXC_DISABLE, MICRO_SECOND);  //Pull CS High
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <write_to_address+0x11c>)
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fa64 	bl	8000d58 <SysTick_Init>

	// Send write instruction
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_RESET);   //Pull CS Low
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <write_to_address+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	210c      	movs	r1, #12
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff fdea 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(1, EXC_DISABLE, US_DELAY);
 800089c:	2208      	movs	r2, #8
 800089e:	2100      	movs	r1, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fa59 	bl	8000d58 <SysTick_Init>
	*((uint8_t*)(&SPI2->DR)) = WRITE;
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <write_to_address+0x114>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <write_to_address+0x118>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	d0fa      	beq.n	80008ae <write_to_address+0x7a>
	dummy = SPI2->DR;
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <write_to_address+0x118>)
 80008ba:	68da      	ldr	r2, [r3, #12]
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	701a      	strb	r2, [r3, #0]

	// Send 16-bit address
	*((uint8_t*)(&SPI2->DR)) = (address >> 8); 	// Address MSB
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <write_to_address+0x114>)
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <write_to_address+0x118>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	d0fa      	beq.n	80008d2 <write_to_address+0x9e>
	dummy = SPI2->DR;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <write_to_address+0x118>)
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&SPI2->DR)) = (address); 		// Address LSB
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <write_to_address+0x114>)
 80008e8:	1dbb      	adds	r3, r7, #6
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	7013      	strb	r3, [r2, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <write_to_address+0x118>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	d0fa      	beq.n	80008f2 <write_to_address+0xbe>
	dummy = SPI2->DR;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <write_to_address+0x118>)
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	230f      	movs	r3, #15
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	701a      	strb	r2, [r3, #0]

	// Send the data
	*((uint8_t*)(&SPI2->DR)) = data;
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <write_to_address+0x114>)
 8000908:	1d7b      	adds	r3, r7, #5
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	7013      	strb	r3, [r2, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); // Hang while RX is empty
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <write_to_address+0x118>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	2201      	movs	r2, #1
 8000916:	4013      	ands	r3, r2
 8000918:	d0fa      	beq.n	8000910 <write_to_address+0xdc>
	dummy = SPI2->DR;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <write_to_address+0x118>)
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	230f      	movs	r3, #15
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	701a      	strb	r2, [r3, #0]
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_SET);
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <write_to_address+0x110>)
 8000926:	2201      	movs	r2, #1
 8000928:	210c      	movs	r1, #12
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fda0 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(5000, EXC_DISABLE, MICRO_SECOND);  //Pull CS HIGH
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <write_to_address+0x11c>)
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fa0e 	bl	8000d58 <SysTick_Init>
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}
 8000944:	48000400 	.word	0x48000400
 8000948:	4000380c 	.word	0x4000380c
 800094c:	40003800 	.word	0x40003800
 8000950:	00001388 	.word	0x00001388

08000954 <read_from_address>:

// Read from EEPROM address using SPI
static uint8_t read_from_address(uint16_t address) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	801a      	strh	r2, [r3, #0]

	uint8_t dummy; // Junk from the DR

	// Send the read instruction
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_RESET);   //Pull  CS low
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <read_from_address+0xc4>)
 8000962:	2200      	movs	r2, #0
 8000964:	210c      	movs	r1, #12
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fd82 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(1, EXC_DISABLE, MICRO_SECOND);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2001      	movs	r0, #1
 8000972:	f000 f9f1 	bl	8000d58 <SysTick_Init>
	*((uint8_t*)(&SPI2->DR)) = READ;
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <read_from_address+0xc8>)
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <read_from_address+0xcc>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	d0fa      	beq.n	800097e <read_from_address+0x2a>
	dummy = SPI2->DR;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <read_from_address+0xcc>)
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	230f      	movs	r3, #15
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	701a      	strb	r2, [r3, #0]

	// Send 16-bit address
	*((uint8_t*)(&SPI2->DR)) = (address >> 8); 	// Address MSB
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <read_from_address+0xc8>)
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0);		// Hang while RX is empty
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <read_from_address+0xcc>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	d0fa      	beq.n	80009a2 <read_from_address+0x4e>
	dummy = SPI2->DR;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <read_from_address+0xcc>)
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&SPI2->DR)) = (address); 		// Address LSB
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <read_from_address+0xc8>)
 80009b8:	1dbb      	adds	r3, r7, #6
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	7013      	strb	r3, [r2, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <read_from_address+0xcc>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	d0fa      	beq.n	80009c2 <read_from_address+0x6e>
	dummy = SPI2->DR;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <read_from_address+0xcc>)
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	701a      	strb	r2, [r3, #0]

	// Clock in the data
	*((uint8_t*)(&SPI2->DR)) = 0x42; 			    // Clock out some junk data
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <read_from_address+0xc8>)
 80009d8:	2242      	movs	r2, #66	; 0x42
 80009da:	701a      	strb	r2, [r3, #0]
	while ((SPI2->SR & SPI_SR_RXNE) == 0); 		// Hang while RX is empty
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <read_from_address+0xcc>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	d0fa      	beq.n	80009de <read_from_address+0x8a>
	dummy = SPI2->DR;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <read_from_address+0xcc>)
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	240f      	movs	r4, #15
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	701a      	strb	r2, [r3, #0]
	GPIO_WritePin(GPIOB, GPIO_PIN12, PIN_SET);
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <read_from_address+0xc4>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	210c      	movs	r1, #12
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fd39 	bl	8000470 <GPIO_WritePin>
	SysTick_Init(5000, EXC_DISABLE, MICRO_SECOND);;  //Pull CS High
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <read_from_address+0xd0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 f9a7 	bl	8000d58 <SysTick_Init>

	return dummy;								              // Return read data
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	781b      	ldrb	r3, [r3, #0]
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b005      	add	sp, #20
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	4000380c 	.word	0x4000380c
 8000a20:	40003800 	.word	0x40003800
 8000a24:	00001388 	.word	0x00001388

08000a28 <TIM16_Enable>:
static void TIM16_Enable(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_APB2TIM16EN;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <TIM16_Enable+0x44>)
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <TIM16_Enable+0x44>)
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	0289      	lsls	r1, r1, #10
 8000a36:	430a      	orrs	r2, r1
 8000a38:	619a      	str	r2, [r3, #24]
	TIM16->PSC = 0x1F3F;   //Setting TIM16 freq to 1kHz
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <TIM16_Enable+0x48>)
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <TIM16_Enable+0x4c>)
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = arr_value;    //1s delay
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <TIM16_Enable+0x50>)
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <TIM16_Enable+0x48>)
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->DIER |= TIM_DIER_UIE;  //Update Interrupt flag set
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <TIM16_Enable+0x48>)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <TIM16_Enable+0x48>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	60da      	str	r2, [r3, #12]
	NVIC_IRQEnable(TIM16_IRQn);   //Enable interrupt for TIM16
 8000a54:	2015      	movs	r0, #21
 8000a56:	f000 f889 	bl	8000b6c <NVIC_IRQEnable>
	TIM16->CR1 |= TIM_CR1_CEN;    //Enable Counter for TIM16
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <TIM16_Enable+0x48>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <TIM16_Enable+0x48>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40014400 	.word	0x40014400
 8000a74:	00001f3f 	.word	0x00001f3f
 8000a78:	20000006 	.word	0x20000006

08000a7c <TIM16_IRQHandler>:
void TIM16_IRQHandler(void){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

	__asm volatile("CPSID I");  //disable all global interrupts
 8000a82:	b672      	cpsid	i
	if(TIM16->SR & TIM_SR_UIF){
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <TIM16_IRQHandler+0x7c>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d01e      	beq.n	8000acc <TIM16_IRQHandler+0x50>
		TIM16->SR &= 0xFFFE;  //Clear Update Interrupt Flag
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <TIM16_IRQHandler+0x7c>)
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <TIM16_IRQHandler+0x7c>)
 8000a94:	4919      	ldr	r1, [pc, #100]	; (8000afc <TIM16_IRQHandler+0x80>)
 8000a96:	400a      	ands	r2, r1
 8000a98:	611a      	str	r2, [r3, #16]
		uint8_t data = read_from_address(address);
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	1dfc      	adds	r4, r7, #7
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff57 	bl	8000954 <read_from_address>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
		if (data!=patterns[address]){
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <TIM16_IRQHandler+0x88>)
 8000ab2:	5c9b      	ldrb	r3, [r3, r2]
 8000ab4:	1dfa      	adds	r2, r7, #7
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d003      	beq.n	8000ac4 <TIM16_IRQHandler+0x48>
			GPIOB->ODR = 0x0001;  //Wrong pattern
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <TIM16_IRQHandler+0x8c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	e003      	b.n	8000acc <TIM16_IRQHandler+0x50>
		}

		else{

			GPIOB->ODR = data;  //Correct bit pattern
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <TIM16_IRQHandler+0x8c>)
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	615a      	str	r2, [r3, #20]
		}
	}
	address++;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000ad6:	801a      	strh	r2, [r3, #0]
	address%=6;  //Values are store at 0x0000 to 0x0005
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2106      	movs	r1, #6
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fb98 	bl	8000214 <__aeabi_uidivmod>
 8000ae4:	000b      	movs	r3, r1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <TIM16_IRQHandler+0x84>)
 8000aea:	801a      	strh	r2, [r3, #0]
	__asm volatile("CPSIE I");   //enable all global interrupts
 8000aec:	b662      	cpsie	i
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b003      	add	sp, #12
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40014400 	.word	0x40014400
 8000afc:	0000fffe 	.word	0x0000fffe
 8000b00:	20000024 	.word	0x20000024
 8000b04:	20000000 	.word	0x20000000
 8000b08:	48000400 	.word	0x48000400

08000b0c <EXTI0_1_IRQHandler>:
void EXTI0_1_IRQHandler(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1;            //Clear the Pending bit as Interrupt is being serviced
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <EXTI0_1_IRQHandler+0x50>)
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <EXTI0_1_IRQHandler+0x50>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
	RCC->APB2RSTR |= 1<<17;   //Reset TIM16 Registers before modifying ARR
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <EXTI0_1_IRQHandler+0x54>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <EXTI0_1_IRQHandler+0x54>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0289      	lsls	r1, r1, #10
 8000b26:	430a      	orrs	r2, r1
 8000b28:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR &= ~1<<17;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <EXTI0_1_IRQHandler+0x54>)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <EXTI0_1_IRQHandler+0x54>)
 8000b30:	0c92      	lsrs	r2, r2, #18
 8000b32:	0492      	lsls	r2, r2, #18
 8000b34:	60da      	str	r2, [r3, #12]
	if(arr_value == 999){
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <EXTI0_1_IRQHandler+0x58>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <EXTI0_1_IRQHandler+0x5c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d104      	bne.n	8000b4a <EXTI0_1_IRQHandler+0x3e>
		arr_value= 499;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <EXTI0_1_IRQHandler+0x58>)
 8000b42:	22f4      	movs	r2, #244	; 0xf4
 8000b44:	32ff      	adds	r2, #255	; 0xff
 8000b46:	801a      	strh	r2, [r3, #0]
 8000b48:	e002      	b.n	8000b50 <EXTI0_1_IRQHandler+0x44>
	}
	else{
		arr_value= 999;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <EXTI0_1_IRQHandler+0x58>)
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <EXTI0_1_IRQHandler+0x5c>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	}
	TIM16_Enable();    //Re-enable TIM16
 8000b50:	f7ff ff6a 	bl	8000a28 <TIM16_Enable>


}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40010400 	.word	0x40010400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	20000006 	.word	0x20000006
 8000b68:	000003e7 	.word	0x000003e7

08000b6c <NVIC_IRQEnable>:
#include "nvic.h"

/*
 * Enables Interrupt for Given IRQ number
 */
void NVIC_IRQEnable(IRQn_t IRQn){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
	NVIC->ISER |= (0x01<<IRQn);  //Enable Interrupt
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <NVIC_IRQEnable+0x2c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4099      	lsls	r1, r3
 8000b84:	000b      	movs	r3, r1
 8000b86:	0019      	movs	r1, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <NVIC_IRQEnable+0x2c>)
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <EXTI_IT_Config>:
 *  Created on: 14 Jul 2023
 *      Author: Malefetsane Lenka
 */
#include "syscfg.h"

void EXTI_IT_Config(GPIO_RegDef_t* GPIOx,uint8_t PinNumber){
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	701a      	strb	r2, [r3, #0]
	SYSCFG_PCLKEN();
 8000baa:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <EXTI_IT_Config+0x16c>)
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	4b56      	ldr	r3, [pc, #344]	; (8000d08 <EXTI_IT_Config+0x16c>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	619a      	str	r2, [r3, #24]
	uint8_t EXTICRx = PinNumber/4;
 8000bb6:	240f      	movs	r4, #15
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	1cfa      	adds	r2, r7, #3
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0892      	lsrs	r2, r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
	uint8_t EXTIx_POS = PinNumber%4;
 8000bc2:	230e      	movs	r3, #14
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	1cfa      	adds	r2, r7, #3
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	2103      	movs	r1, #3
 8000bcc:	400a      	ands	r2, r1
 8000bce:	701a      	strb	r2, [r3, #0]

	if (GPIOx==GPIOA){
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	2390      	movs	r3, #144	; 0x90
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d10c      	bne.n	8000bf4 <EXTI_IT_Config+0x58>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTA<<4*EXTIx_POS);
 8000bda:	484c      	ldr	r0, [pc, #304]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	494a      	ldr	r1, [pc, #296]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	3202      	adds	r2, #2
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	5812      	ldr	r2, [r2, r0]
 8000bec:	3302      	adds	r3, #2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	505a      	str	r2, [r3, r1]





}
 8000bf2:	e085      	b.n	8000d00 <EXTI_IT_Config+0x164>
	else if (GPIOx==GPIOB){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a46      	ldr	r2, [pc, #280]	; (8000d10 <EXTI_IT_Config+0x174>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d116      	bne.n	8000c2a <EXTI_IT_Config+0x8e>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTB<<4*EXTIx_POS);
 8000bfc:	4a43      	ldr	r2, [pc, #268]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000bfe:	240f      	movs	r4, #15
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	3302      	adds	r3, #2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	589a      	ldr	r2, [r3, r2]
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	2101      	movs	r1, #1
 8000c14:	4099      	lsls	r1, r3
 8000c16:	000b      	movs	r3, r1
 8000c18:	0018      	movs	r0, r3
 8000c1a:	493c      	ldr	r1, [pc, #240]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4302      	orrs	r2, r0
 8000c22:	3302      	adds	r3, #2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	505a      	str	r2, [r3, r1]
}
 8000c28:	e06a      	b.n	8000d00 <EXTI_IT_Config+0x164>
	else if (GPIOx==GPIOC){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <EXTI_IT_Config+0x178>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d116      	bne.n	8000c60 <EXTI_IT_Config+0xc4>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTC<<4*EXTIx_POS);
 8000c32:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000c34:	240f      	movs	r4, #15
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	589a      	ldr	r2, [r3, r2]
 8000c40:	230e      	movs	r3, #14
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4099      	lsls	r1, r3
 8000c4c:	000b      	movs	r3, r1
 8000c4e:	0018      	movs	r0, r3
 8000c50:	492e      	ldr	r1, [pc, #184]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4302      	orrs	r2, r0
 8000c58:	3302      	adds	r3, #2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	505a      	str	r2, [r3, r1]
}
 8000c5e:	e04f      	b.n	8000d00 <EXTI_IT_Config+0x164>
	else if (GPIOx==GPIOD){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <EXTI_IT_Config+0x17c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d116      	bne.n	8000c96 <EXTI_IT_Config+0xfa>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTD<<4*EXTIx_POS);
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000c6a:	240f      	movs	r4, #15
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3302      	adds	r3, #2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	589a      	ldr	r2, [r3, r2]
 8000c76:	230e      	movs	r3, #14
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	2103      	movs	r1, #3
 8000c80:	4099      	lsls	r1, r3
 8000c82:	000b      	movs	r3, r1
 8000c84:	0018      	movs	r0, r3
 8000c86:	4921      	ldr	r1, [pc, #132]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4302      	orrs	r2, r0
 8000c8e:	3302      	adds	r3, #2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	505a      	str	r2, [r3, r1]
}
 8000c94:	e034      	b.n	8000d00 <EXTI_IT_Config+0x164>
	else if (GPIOx==GPIOE){
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <EXTI_IT_Config+0x180>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d116      	bne.n	8000ccc <EXTI_IT_Config+0x130>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTE<<4*EXTIx_POS);
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000ca0:	240f      	movs	r4, #15
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	589a      	ldr	r2, [r3, r2]
 8000cac:	230e      	movs	r3, #14
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	0018      	movs	r0, r3
 8000cbc:	4913      	ldr	r1, [pc, #76]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4302      	orrs	r2, r0
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	505a      	str	r2, [r3, r1]
}
 8000cca:	e019      	b.n	8000d00 <EXTI_IT_Config+0x164>
	else if (GPIOx==GPIOF){
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <EXTI_IT_Config+0x184>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d115      	bne.n	8000d00 <EXTI_IT_Config+0x164>
		SYSCFG->EXTICR[EXTICRx] |= (GPIO_PORTF<<4*EXTIx_POS);
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000cd6:	240f      	movs	r4, #15
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	589a      	ldr	r2, [r3, r2]
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	2105      	movs	r1, #5
 8000cec:	4099      	lsls	r1, r3
 8000cee:	000b      	movs	r3, r1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	4906      	ldr	r1, [pc, #24]	; (8000d0c <EXTI_IT_Config+0x170>)
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4302      	orrs	r2, r0
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	505a      	str	r2, [r3, r1]
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b005      	add	sp, #20
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	48001400 	.word	0x48001400

08000d24 <pollflag>:
 */

#include "systick.h"


static void pollflag(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	 while (!(SysTick->CSR&SYSTICK_CSR_COUNTFLAG)); //Wait until flag is set
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <pollflag+0x30>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	4013      	ands	r3, r2
 8000d34:	d0f9      	beq.n	8000d2a <pollflag+0x6>
	 SysTick->CSR &= SYSTICK_CSR_EN; //Enable Counter
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <pollflag+0x30>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <pollflag+0x30>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	400a      	ands	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
	 SysTick->CSR &=  SYSTICK_PROCESSOR_CLK;
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <pollflag+0x30>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <pollflag+0x30>)
 8000d48:	2104      	movs	r1, #4
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]

}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <SysTick_Init>:

/*
 * @Brief: Initializes Systic Timer for Delays
 * @
 */
void SysTick_Init(uint32_t delay,uint8_t ExEnOrDi,uint8_t msorus){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	0008      	movs	r0, r1
 8000d62:	0011      	movs	r1, r2
 8000d64:	1cfb      	adds	r3, r7, #3
 8000d66:	1c02      	adds	r2, r0, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	1cbb      	adds	r3, r7, #2
 8000d6c:	1c0a      	adds	r2, r1, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	uint32_t ReloadVal = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

	if (msorus){
 8000d74:	1cbb      	adds	r3, r7, #2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00b      	beq.n	8000d94 <SysTick_Init+0x3c>
		 ReloadVal = (delay*MS_DELAY - 1)&0x00FFFFFF;  //Reload value
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	0013      	movs	r3, r2
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	189b      	adds	r3, r3, r2
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e005      	b.n	8000da0 <SysTick_Init+0x48>

	}
	else{
		 ReloadVal = (delay*US_DELAY - 1)&0x00FFFFFF;  //Reload value
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	60fb      	str	r3, [r7, #12]

	}

	SysTick->RVR = ReloadVal; //Load Reload VALUE
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <SysTick_Init+0xa0>)
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	605a      	str	r2, [r3, #4]
	SysTick->CVR &= ~(0x00FFFFFF);  //Clear Current value
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <SysTick_Init+0xa0>)
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <SysTick_Init+0xa0>)
 8000dac:	0e12      	lsrs	r2, r2, #24
 8000dae:	0612      	lsls	r2, r2, #24
 8000db0:	609a      	str	r2, [r3, #8]
	SysTick->CSR  |= SYSTICK_PROCESSOR_CLK; //Select Processor Clock
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <SysTick_Init+0xa0>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <SysTick_Init+0xa0>)
 8000db8:	2104      	movs	r1, #4
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
    SysTick->CSR &=~EXC_ENABLE; //Clear the Exception enable bit
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <SysTick_Init+0xa0>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <SysTick_Init+0xa0>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= ExEnOrDi; //Exception Enable/Diasble
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <SysTick_Init+0xa0>)
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	1cfb      	adds	r3, r7, #3
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <SysTick_Init+0xa0>)
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
    SysTick->CSR |= SYSTICK_CSR_EN; //Enable Counter
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <SysTick_Init+0xa0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SysTick_Init+0xa0>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
   if (ExEnOrDi==EXC_DISABLE){
 8000de4:	1cfb      	adds	r3, r7, #3
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <SysTick_Init+0x98>
	   //Polling
	   //Delay
	   pollflag();
 8000dec:	f7ff ff9a 	bl	8000d24 <pollflag>
   }
   //Otherwise Implement Systick Hnadler


}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	e000      	b.n	8000e04 <Reset_Handler+0x8>
 8000e02:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f000 f811 	bl	8000e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff fbaf 	bl	8000590 <main>

08000e32 <LoopForever>:

LoopForever:
  b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000e40:	08000eb8 	.word	0x08000eb8
  ldr r2, =_sbss
 8000e44:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000e48:	20000028 	.word	0x20000028

08000e4c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_COMP_IRQHandler>
	...

08000e50 <__libc_init_array>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2600      	movs	r6, #0
 8000e54:	4c0c      	ldr	r4, [pc, #48]	; (8000e88 <__libc_init_array+0x38>)
 8000e56:	4d0d      	ldr	r5, [pc, #52]	; (8000e8c <__libc_init_array+0x3c>)
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	42a6      	cmp	r6, r4
 8000e5e:	d109      	bne.n	8000e74 <__libc_init_array+0x24>
 8000e60:	2600      	movs	r6, #0
 8000e62:	f000 f819 	bl	8000e98 <_init>
 8000e66:	4c0a      	ldr	r4, [pc, #40]	; (8000e90 <__libc_init_array+0x40>)
 8000e68:	4d0a      	ldr	r5, [pc, #40]	; (8000e94 <__libc_init_array+0x44>)
 8000e6a:	1b64      	subs	r4, r4, r5
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	42a6      	cmp	r6, r4
 8000e70:	d105      	bne.n	8000e7e <__libc_init_array+0x2e>
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	00b3      	lsls	r3, r6, #2
 8000e76:	58eb      	ldr	r3, [r5, r3]
 8000e78:	4798      	blx	r3
 8000e7a:	3601      	adds	r6, #1
 8000e7c:	e7ee      	b.n	8000e5c <__libc_init_array+0xc>
 8000e7e:	00b3      	lsls	r3, r6, #2
 8000e80:	58eb      	ldr	r3, [r5, r3]
 8000e82:	4798      	blx	r3
 8000e84:	3601      	adds	r6, #1
 8000e86:	e7f2      	b.n	8000e6e <__libc_init_array+0x1e>
 8000e88:	08000eb0 	.word	0x08000eb0
 8000e8c:	08000eb0 	.word	0x08000eb0
 8000e90:	08000eb4 	.word	0x08000eb4
 8000e94:	08000eb0 	.word	0x08000eb0

08000e98 <_init>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_fini>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr
